#!/usr/bin/env emacs --script

(let ((current-directory (file-name-directory load-file-name)))
  (setq projectile-bench-path (expand-file-name "." current-directory))
  (setq projectile-root-path (expand-file-name ".." current-directory)))

(add-to-list 'load-path projectile-root-path)
(add-to-list 'load-path projectile-bench-path)

(require 'ack-and-a-half)
(require 'noflet)

(load (expand-file-name "test-helper.el" projectile-bench-path) nil t)
(load (expand-file-name "bench-helper.el" projectile-bench-path) nil t)

(defvar bench-projectile-datadirs
  '("/testdata/" "/scp:sshd:/testdata/"))

(defun projectile-benchmark-run ()
  "TODO"
  (require 'projectile)
  (message "loading %s" (car command-line-args-left) )
  (load (car command-line-args-left))
  (unwind-protect
      (let ((stats (ert-run-tests-batch t)))
        (perf-write-results)
        (kill-emacs (if (zerop (ert-stats-completed-unexpected stats)) 0 1)))
    (unwind-protect
        (progn
          (perf-write-results)
          (message "Error running tests")
          (backtrace))
      (kill-emacs 2))))

(defun projectile-benchmark-run-matrix ()
  "Run benchmarks in various configurations."
  (setenv "BENCH_RESULTS" (format "/bench-logs/%s.txt"
                                  (format-time-string "%Y-%m-%d-%H_%M_%S")))
  (-each (or argv (directory-files projectile-bench-path t "-bench.el$"))
    '(lambda (bench-file)
       (setenv "BENCH_FILE" bench-file)
       (-each bench-projectile-datadirs
         '(lambda (bench-datadir)
            (-each '("no-cache" "full-cache" "cache-per-test")
              '(lambda (bench-profile)
                 (message
                  "\n\n-------------------------------\n%s ::  %s :: %s\n"
                  bench-profile bench-datadir bench-file)
                 (setenv "BENCH_DATADIR" bench-datadir)
                 (setenv "BENCH_PROFILE" bench-profile)
                 (let* ((default-directory (file-name-directory
                                            default-directory))
                        (proc
                         (start-file-process-shell-command
                          "benchrunner" "*benchrunner*"
                          (concat
                           "cask exec emacs --no-site-file "
                           "--no-site-lisp --batch " "-l test/run-bench "
                           bench-file))))
                   (set-process-filter proc '(lambda (proc string)
                                               (message "%s"
                                                        (s-chomp string))))

                   (accept-process-output proc)
                   (while (process-live-p proc)
                     (sit-for 0.1))))))))))

(if (getenv "BENCH_DATADIR")
    (projectile-benchmark-run)
  (projectile-benchmark-run-matrix))
