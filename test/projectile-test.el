(ert-deftest projectile-test-string-suffix-p ()
  (should (projectile-string-suffix-p "test.txt" "txt"))
  (should (not (projectile-string-suffix-p "test.txt" "rb"))))

(ert-deftest projectile-test-uniquify-file ()
  (should (equal (projectile-uniquify-file "ala/bala/portokala") "bala/portokala")))

(ert-deftest projectile-test-project-get-name ()
  (should (equal (projectile-get-project-name) "project")))

(ert-deftest projectile-test-prepend-project-name ()
  (should (equal (projectile-prepend-project-name "Test") "[project] Test")))

(ert-deftest projectile-test-trim-no-whitespace ()
  (should (equal (projectile-trim "foo") "foo")))

(ert-deftest projectile-test-trim-whitespace-before ()
  (should (equal (projectile-trim " foo") "foo"))
  (should (equal (projectile-trim "\tfoo") "foo"))
  (should (equal (projectile-trim "\nfoo") "foo")))

(ert-deftest projectile-test-trim-whitespace-after ()
  (should (equal (projectile-trim "foo ") "foo"))
  (should (equal (projectile-trim "foo\t") "foo"))
  (should (equal (projectile-trim "foo\n") "foo")))

(ert-deftest projectile-test-trim-whitespace-both ()
  (should (equal (projectile-trim " foo ") "foo"))
  (should (equal (projectile-trim "\tfoo\t") "foo"))
  (should (equal (projectile-trim "\nfoo\n") "foo")))

(ert-deftest projectile-test-expand-root ()
  (should (equal (projectile-expand-root "foo") "/path/to/project/foo/"))
  (should (equal (projectile-expand-root "foo/bar") "/path/to/project/foo/bar/"))
  (should (equal (projectile-expand-root "./foo/bar") "/path/to/project/foo/bar/")))

(ert-deftest projectile-test-ignored-p ()
  (let ((projectile-project-root-files '(".git")))
    (should (projectile-ignored-p "/path/to/project/.git/"))
    (should-not (projectile-ignored-p "/path/to/project/.git"))
    (should-not (projectile-ignored-p ".projectile"))
    (should-not (projectile-ignored-p "tmp/.git"))))

(ert-deftest projectile-test-ignored-directory-p ()
  (flet ((projectile-ignored-directories () '("/path/to/project/tmp")))
    (should (projectile-ignored-directory-p "/path/to/project/tmp"))
    (should-not (projectile-ignored-directory-p "/path/to/project/log"))))

(ert-deftest projectile-test-ignored-file-p ()
  (flet ((projectile-ignored-files () '("/path/to/project/TAGS")))
    (should (projectile-ignored-file-p "/path/to/project/TAGS"))
    (should-not (projectile-ignored-file-p "/path/to/project/foo.el"))))

(ert-deftest projectile-test-ignored-extension-p ()
  (let ((projectile-ignored-file-extensions '("elc")))
    (should (projectile-ignored-extension-p "foo.elc"))
    (should (projectile-ignored-extension-p "/path/to/project/foo.elc"))
    (should-not (projectile-ignored-extension-p "foo.el"))))

(ert-deftest projectile-test-ignored-files ()
  (flet ((projectile-project-ignored-files () '("foo.js" "bar.rb")))
    (let ((expected '("/path/to/project/TAGS/" "/path/to/project/foo.js/" "/path/to/project/bar.rb/"))
          (projectile-ignored-files '("TAGS")))
      (should (equal (projectile-ignored-files) expected)))))

(ert-deftest projectile-test-ignored-directories ()
  (flet ((projectile-project-ignored-directories () '("tmp" "log")))
    (let ((expected '("/path/to/project/compiled/" "/path/to/project/tmp/" "/path/to/project/log/"))
          (projectile-ignored-directories '("compiled")))
      (should (equal (projectile-ignored-directories) expected)))))

(ert-deftest projectile-test-project-ignored-files ()
  (let ((files '("/path/to/project/foo.el" "/path/to/project/foo.elc")))
    (flet ((projectile-project-ignored () files))
      (flet ((file-directory-p (filename) nil))
        (should (equal (projectile-project-ignored-files) files)))
      (flet ((file-directory-p (filename) t))
        (should-not (projectile-project-ignored-files))))))

(ert-deftest projectile-test-project-ignored-directories ()
  (let ((directories '("/path/to/project/tmp" "/path/to/project/log")))
    (flet ((projectile-project-ignored () directories))
      (flet ((file-directory-p (filename) t))
        (should (equal (projectile-project-ignored-directories) directories)))
      (flet ((file-directory-p (filename) nil))
        (should-not (projectile-project-ignored-directories))))))

(ert-deftest projectile-test-project-ignored ()
  (let* ((file-names '("log" "tmp" "compiled"))
         (files (mapcar 'projectile-expand-root file-names)))
    (flet ((projectile-parse-ignore-file () file-names)
           (file-expand-wildcards (pattern full) (list (projectile-expand-root pattern))))
      (should (equal (projectile-project-ignored) files)))))

(ert-deftest projectile-test-parse-ignore-file ()
  (flet ((buffer-string () " log\t\ntmp \ncompiled\n")
         (file-exists-p (filename) t)
         (insert-file-contents-literally (filename) nil))
    (should (equal '("log" "tmp" "compiled") (projectile-parse-ignore-file)))))
